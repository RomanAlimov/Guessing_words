                                         #–∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Ä–∞–Ω–¥–æ–º ‚úÖ
from random import *
import time
                                     #—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–≥–∞–¥—ã–≤–∞—Ç—å—Å—è ‚úÖ
word_list = ['–ö–õ–Æ–ß', '–ö–ù–ò–ì–ê', '–ï–ù–û–¢', '–ú–ê–®–ò–ù–ö–ê', '–ö–û–†–û–í–ê', '–¢–ï–õ–ï–ñ–ö–ê', '–®–õ–ï–ú', '–ö–ù–û–ü–ö–ê', '–®–ù–£–†', '–ß–ï–†–ù–´–ô',
'–í–õ–ê–°–¢–ï–õ–ò–ù', '–°–ö–ê–ô–ü', '–î–£–ë', '–ß–ê–°–´', '–¢–†–£–ë–ê', '–ï–õ–ö–ê', '–ò–ù–°–¢–ò–¢–£–¢', '–ö–û–†–û–ë–ö–ê', '–¢–ê–ë–õ–ò–ß–ö–ê', '–í–û–î–ê', '–°–ö–û–í–û–†–û–î–ê',
'–ú–ù–û–ì–û–ù–û–ñ–ö–ê', '–ï–í–†–ï–ô', '–¢–ï–†–ú–ò–¢', '–ö–ê–ß–ï–ö', '–†–£–õ–û–ù', '–ú–ê–ì–ù–ò–¢–û–§–û–ù', '–ù–û–ì–ê', '–°–õ–û–ù', '–ú–ò–ö–†–û–í–û–õ–ù–û–í–ö–ê', '–¢–û–†–¢', '–ú–ê–ö',
'–î–´–ú', '–ß–ê–ô–ö–ê', '–í–ê–õ–ï–¢', '–ü–õ–ò–ù–¢–£–°', '–®–ê–ü–ö–ê', '–î–ò–ù–û–ó–ê–í–†', '–¢–û–†–®–ï–†', '–ë–ê–õ–ê–õ–ê–ô–ö–ê', '–ë–ê–ù–ö–ê', '–Ø–•–¢–ê', '–û–í–¶–ê', '–ë–ê–ù–ê–ù',
'–î–£–ë', '–ê–ù–ò–ú–ï', '–†–ê–î–£–ì–ê', '–ë–£–ö–í–ê', '–í–ï–õ–û–°–ò–ü–ï–î', '–ë–ê–ù–î–ñ–û', '–ì–û–õ–£–ë–¨', '–í–ò–ù–¢–û–í–ö–ê', '–ö–£–ë–û–ö', '–ñ–ê–°–ú–ò–ù', '–¢–ï–õ–ï–§–û–ù',
'–ê–ù–î–†–û–ò–î', '–ì–û–†–ê', '–•–ê–õ–ê–¢', '–ñ–ï–¢–û–ù', '–û–ë–û–î', '–ú–´–õ–û', '–ô–û–ì', '–®–ò–®–ö–ê', '–î–û–õ–õ–ê–†', '–ö–û–õ–û–ù–ö–ê', '–ö–£–ë–ò–ö', '–û–ú–ê–†',
'–†–ê–ö–ï–¢–ê', '–ú–û–†–ö–û–í–ö–ê', '–ó–ï–†–ö–ê–õ–û', '–ú–û–õ–û–¢', '–í–û–ó–î–£–•', '–ó–ú–ï–ô', '–Å–ñ', '–ü–ê–õ–¨–ú–ê', '–ú–ê–°–õ–û', '–î–ò–î–ñ–ï–ô', '–ú–ï–®–û–ö', '–¢–Æ–ë–ò–ö',
'–ú–û–ó–ì', '–ü–û–ï–ó–î', '–†–û–ó–ï–¢–ö–ê', '–ü–ê–†–ê–®–Æ–¢–ò–°–¢', '–ë–ï–õ–ö–ê', '–®–ü–†–û–¢–´', '–°–ê–ú–û–°–í–ê–õ', '–ü–ê–ó–õ', '–ë–£–¢–´–õ–ö–ê', '–ö–†–ï–ú–õ–¨', '–ü–ò–¶–¶–ê',
'–ú–ê–ö–ê–†–û–ù–´', '–ö–û–í–ï–†', '–ó–£–ë–´', '–Ø–†–õ–´–ö', '–ö–ê–®–ê–õ–û–¢', '–ú–ê–†–°', '–®–ê–ö–ê–õ', '–ü–û–ú–ê–î–ê', '–î–ñ–ò–ü', '–õ–ï–©', '–ö–ê–ú–ï–ù–¨', '–î–ò–°–ö']



                                      #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Å–ª–æ–≤–∞‚úÖ

def get_word(word):
    return choice(word)

s = get_word(word_list)

                                      # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è‚úÖ

def display_hangman(tries):
    stages = [  # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–±–µ –Ω–æ–≥–∏
                '''
                   --------
                   |      |
                   |      üíÄ
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–¥–Ω–∞ –Ω–æ–≥–∞
                '''
                   --------
                   |      |
                   |      üò≠
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏
                '''
                   --------
                   |      |
                   |      üò¢
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å –∏ –æ–¥–Ω–∞ —Ä—É–∫–∞
                '''
                   --------
                   |      |
                   |      üò´
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞ –∏ —Ç–æ—Ä—Å
                '''
                   --------
                   |      |
                   |      üò≤
                   |      |
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞
                '''
                   --------
                   |      |
                   |      üò®
                   |    
                   |      
                   |     
                   -
                ''',
                # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                '''
                   --------
                   |      |
                   |    
                   |    
                   |           ü¶ó
                   |     
                   -
                '''
    ]
    return stages[tries]

                                                   #—Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏‚ú¥

def play(word):
    word_com = '_' * len(s)
    g_letters = [] #–Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –±—É–∫–≤
    g_words = [] #–Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
    tries = 6
    print('üëπ–ù–∞–¥–µ—é—Å—å –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä–∞—Ç—å –≤ —É–≥–∞–¥–∞–π–∫—É —Å–ª–æ–≤.üëπ')
    time.sleep(2)
    print('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ', word_com)
    print('–£ –≤–∞—Å:', tries, '–ø–æ–ø—ã—Ç–æ–∫.')
    print(display_hangman(tries))
    while word_com != 0:
        use = input("üîä - –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ! \n").upper()


        if len(use) == len(g_words):
            if use in g_words:
                print('‚ö†Ô∏è‚ö†Ô∏è–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.‚ö†Ô∏è‚ö†Ô∏è')
                continue

        if use in g_letters:
            print('Ô∏è‚ö†Ô∏èÔ∏è‚ö†Ô∏è–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—É—é –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.Ô∏è‚ö†Ô∏èÔ∏è‚ö†Ô∏è')
            continue


        elif use == s:
            print('‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏üëπ, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ‚úÖ:', s)
            time.sleep(2)
            exit()

        if word_com == s:
            print('‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏üëπ, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ‚úÖ:', s)
            exit()

        elif use != s: #‚úÖ
            g_words.append(use)
            g_letters.append(use)
            tries -= 1
            print(display_hangman(tries))
            print('‚ùå–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ!‚ùå')
            print("üîî–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:", tries)

        elif use not in s:
            if use in g_letters:
                print('‚ùå–¢–∞–∫–æ–π –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç.‚ùå')
                g_letters.append(use)
                tries -= 1
                print(display_hangman(tries))
                print("üîî–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:", tries)
                continue

        for i in range(len(s)):
           if s[i] == use:
               tries += 1
               word_com = word_com[:i] + use + word_com[i + 1:]
               print(word_com)

        if tries == 0:
            print('üíÄ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.üíÄ')
            print('–ó–ê–ì–ê–î–ê–ù–ù–û–ï –°–õ–û–í–û –ë–´–õ–û:', s)
            exit()

play(word_list)
